// Test script to verify Chinese processing works correctly
import {
  segmentChineseText,
  processChineseText,
  isChineseText,
} from "./app/utils/chineseProcessor.client.ts";

async function testChineseProcessing() {
  console.log("üß™ Testing Chinese text processing...\n");

  const testTexts = [
    "ÊàëÁà±Êñ∞Ë•øÂÖ∞ÔºåËøôÊòØ‰∏Ä‰∏™Áæé‰∏ΩÁöÑÂõΩÂÆ∂",
    "‰ªäÂ§©Â§©Ê∞îÂæàÂ•ΩÔºåÊàëÊÉ≥ÂéªÂÖ¨Âõ≠Êï£Ê≠•",
    "‰∫∫Â∑•Êô∫ËÉΩÊäÄÊúØÂèëÂ±ïÂæàÂø´ÔºåÊú™Êù•‰ºöÊîπÂèòÊàë‰ª¨ÁöÑÁîüÊ¥ª",
    "blueskyÊòØ‰∏Ä‰∏™ÂæàÂ•ΩÁöÑÁ§æ‰∫§Â™í‰ΩìÂπ≥Âè∞",
    "‰∏≠ÊñáÂàÜËØçÊòØËá™ÁÑ∂ËØ≠Ë®ÄÂ§ÑÁêÜÁöÑÈáçË¶ÅÊäÄÊúØ",
  ];

  for (const text of testTexts) {
    console.log(`üìù Original text: "${text}"`);
    console.log(`üîç Is Chinese text: ${isChineseText(text)}`);

    try {
      const words = await segmentChineseText(text);
      console.log(`‚úÖ Segmented words: [${words.join(", ")}]`);

      const wordFreq = await processChineseText(text);
      console.log(`üìä Word frequencies:`, Object.fromEntries(wordFreq));

      // Check for problematic fragments
      const problematicWords = words.filter(
        (word) => word === "Êñ∞Ë•ø" || word === "Ë•øÂÖ∞" || word.length === 1
      );
      if (problematicWords.length > 0) {
        console.log(
          `‚ö†Ô∏è  Found problematic words: [${problematicWords.join(", ")}]`
        );
      }
    } catch (error) {
      console.error(`‚ùå Error processing "${text}":`, error);
    }

    console.log("---\n");
  }
}

// Test the functionality
testChineseProcessing().catch(console.error);
